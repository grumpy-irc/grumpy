#!/bin/bash
#  Copyright (c) 2013 - 2015, Petr Bena
#  All rights reserved.

#  Redistribution and use in source and binary forms, with
#  or without modification, are permitted provided that
#  the following conditions are met:

#  1. Redistributions of source code must retain
#     the above copyright notice, this list 
#     of conditions and the following disclaimer.

#  2. Redistributions in binary form must reproduce the above copyright
#     notice, this list of conditions and the following disclaimer in
#     the documentation and/or other materials provided with the distribution.

#  3. Neither the name of GrumpyChat nor the names of its contributors may be used
#     to endorse or promote products derived from this software without specific
#     prior written permission.

#  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND ANY EXPRESS
#  OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF
#  MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL
#  THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
#  SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT
#  OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
#  HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
#  OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
#  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

SKIPCHECKS=0
modules=0
RED=$(tput setaf 1)
WARN=$(tput setaf 3)
GREEN=$(tput setaf 2)
NORMAL=$(tput sgr0)
QT5=1
USEDEBUG=0
UNIT_TESTS=''
CMAKE_ARGS=''
_BUILD=0
_Q=0
QTPATH=''
BUILD=release
HAS_PREFIX=0
PREFIX=""
BUILD_CHANGED=0
if [ x"$*" != x ];then
    echo "Options used: $*"
fi
# first we parse all arguments we got
for var in $@
do
    if [ "$var" = "--help" ] || [ "$var" = "-h" ];then
        echo "Configure script for grumpy, parameters:"
        echo "=========================================="
        echo " --debug: build a debuggable grumpy"
        echo " --disable-dependency-tracking: skip all package checks"
        echo " --extension: will build all extensions as well"
        echo " --unit-test: will build unit tests"
        echo " --qtpath: path to Qt (for example C:\\Qt\\5.4\\mingw\\"
        echo " --prefix: specify prefix for installation path"
        echo " --folder <folder>: change the default build folder"
        echo " --no-colors: suppress colors"
        echo " --version: show version"
        echo
        echo "Copyright (c) 2013 - 2015 Petr Bena. This script is licensed under the BSD license."
        exit 0
    fi
    if [ "$_BUILD" = "1" ];then
        BUILD="$var"
        _BUILD=0
        continue
    fi
    if [ "$_Q" = "1" ];then
        _Q=0
        QTPATH=$var
        continue
    fi
    if [ "$HAS_PREFIX" = "1" ];then
        HAS_PREFIX=0
        PREFIX=$var
        continue
    fi
    if [ "$var" = "--extension" ];then
        modules=1
        continue
    fi
    if [ "$var" = "--prefix" ];then
        HAS_PREFIX=1
        continue
    fi
    if [ "$var" = "--unit-test" ];then
        UNIT_TESTS=' -DUNIT_TESTS=true'
        continue
    fi
    if [ "$var" = "--qtpath" ];then
        _Q=1
        continue
    fi
    if [ "$var" = "--no-colors" ];then
        RED=""
        WARN=""
        GREEN=""
        NORMAL=""
    fi
    if [ "$var" = "--qt5" ];then
        QT5=1
        continue
    fi
    if [ "$var" = "--folder" ];then
        _BUILD=1
        continue
    fi
    if [ "$var" = "--debug" ];then
        USEDEBUG=1
        continue
    fi
    if [ "$var" = "--version" ];then
        echo "Configure v 1.0"
        exit 0
    fi
    if [ "$var" = "--disable-dependency-tracking" ];then
        SKIPCHECKS=1
        continue
    fi
done

ok()
{
    printf '%s%s%s\n' "$GREEN" "[OK]" "$NORMAL"
}

fail()
{
    printf '%s%s%s\n' "$RED" "[FAIL]" "$NORMAL"
}

warn()
{
    printf '%s%s%s\n' "$WARN" "WARNING!" "$NORMAL"
}

text()
{
    MSG="$1"
    let COL=$(tput cols)-20-${#MSG}+${#GREEN}+${#NORMAL}
    printf '%s%*s' "$MSG" $COL
}

checkhf()
{
    text "Check for headers of $1..."
    if [ "$SKIPCHECKS" -eq 1 ];then
        echo "SKIP"
        return 0
    fi
    if [ -f "$2" ];then
        ok
        return 0
    else
        fail
        echo "Unable to find headers for $1 ($2)"
        echo "try installing dev files for $1"
        exit 1
    fi
} 

checkqt()
{
    text "Checking if $1 or $2 is present... "
    if [ "$SKIPCHECKS" -eq 1 ];then
        echo "SKIP"
        return 0
    fi
    if [ "`apt-cache policy $1 | grep -Ev '^\s*Installed: \(none\)' | grep -E '^\s*Installed: ' | wc -l`" -gt 0 ];then
        ok
        return 0
    fi

    if [ "`apt-cache policy $2 | grep -Ev '^\s*Installed: \(none\)' | grep -E '^\s*Installed: ' | wc -l`" -gt 0 ];then
        ok
        return 0
    fi

    fail
    echo "$1 neither $2 is present, use --skip-checks to ignore this"
    echo "or execute apt-get install $1 $2 as root"
    exit 1
}


checkpkg()
{
    text "Checking if $1 is present... "
    if [ "$SKIPCHECKS" == "1" ];then
        echo "SKIP"
        return 0
    fi
    if [ "`apt-cache policy $1 | grep -Ev '^\s*Installed: \(none\)' | grep -E '^\s*Installed: ' | wc -l`" -gt 0 ];then
        ok
        return 0
    fi
    fail
    echo "$1 is not present, use --skip-checks to ignore this"
    echo "or execute apt-get install $1 as root"
    exit 1
}

if [ "$USEDEBUG" -eq 1 ];then
    CMAKE_ARGS="$CMAKE_ARGS -DCMAKE_BUILD_TYPE=Debug"
    if [ "$BUILD_CHANGED" = "0" ];then
        BUILD='debug'
    fi
else
    CMAKE_ARGS="$CMAKE_ARGS -DCMAKE_BUILD_TYPE=Release"
fi

echo "Checking all required packages..."
text "Checking for cmake... "

if [ "`which cmake`" = "" ];then
	fail
	echo "cmake can't be found"
	exit 1
fi

ok

if [ -d "../.git" ];then
    echo "This is a git repository, updating modules..."
    git submodule init
    git submodule update
fi

if [ ! -f "src/sqlite/sqlite3.h" ];then
    echo "The sqlite files are missing! Fixing by using a backup file..."
    cd "src/sqlite" || exit 1
    unzip sqlite-amalgamation-3220000.zip || exit 1
    mv sqlite-amalgamation-3220000/* . || exit 1
    rm -rf sqlite-amalgamation-3220000 || exit 1
    cd - || exit 1
fi

if [ ! -d "src/libirc/libirc" ];then
    echo "The libirc directories are missing! Fixing by using a backup file..."
    cd "src/libirc" || exit 1
    unzip libirc.zip || exit 1
    cd - || exit 1
fi

if [ "$QT5" -eq 10 ];then
    QT5=1
    echo $WARN"WARNING: No version of QT was explicitly specified, assuming you want to use QT5 (use --qt4 if not)"$NORMAL
fi

if [ "$QT5" -eq 1 ];then
    CMAKE_ARGS="$CMAKE_ARGS -DQT5_BUILD=true"
else
    CMAKE_ARGS="$CMAKE_ARGS -DQT5_BUILD=false"
fi

#text "Executing update.sh... "

#if [ ! -f update.sh ];then
#    fail
#    echo "update.sh is missing!"
#    exit 1
#fi

#sh update.sh || exit 1;ok
#text "Checking if version.txt exist... "

#if [ ! -f version.txt ];then
#        fail
#	echo "Error! unable to create a version file!"
#	exit 1
#fi
#ok

if [ x"$PREFIX" != "x" ];then
    CMAKE_ARGS="$CMAKE_ARGS -DCMAKE_INSTALL_PREFIX:PATH=$PREFIX"
fi
if [ x"$QTPATH" != "x" ];then
    CMAKE_ARGS="$CMAKE_ARGS -DCMAKE_PREFIX_PATH:PATH=$QTPATH"
fi
if [ -d "$BUILD" ];then
  echo $WARN"WARNING: build directory already exist make sure it's clean"$NORMAL
else
  mkdir "$BUILD" || exit 1
fi
cd "$BUILD" || exit 1
echo "CMake args: $CMAKE_ARGS $UNIT_TESTS -Wno-dev"
cmake ../src $CMAKE_ARGS $UNIT_TESTS -Wno-dev || exit 1
echo "Everything is ready, you can build grumpy by entering "$BUILD" and typing"
echo "make"

# this isn't normally needed but ensure we return 0 here
exit 0
