PROJECT(grumpyd)

SET(QT_USE_QTNETWORK TRUE)
SET(QT_USE_QTSQL TRUE)
SET(QT_USE_QTXML TRUE)
SET(QT_USE_QTSCRIPT TRUE)
SET(CMAKE_BUILD_TYPE Release)
SET(CMAKE_AUTOMOC ON)

option(QT6_BUILD "Build with Qt6" false)

if(QT6_BUILD)
  find_package(Qt6Core REQUIRED)
  find_package(Qt6Sql REQUIRED)
  find_package(Qt6Xml REQUIRED)
  find_package(Qt6Network REQUIRED)
  set(QT_INCLUDES ${Qt6Xml_INCLUDE_DIRS} ${Qt6Network_INCLUDE_DIRS} ${Qt6Sql_INCLUDE_DIRS})
  include_directories(${QT_INCLUDES})
elseif(QT5_BUILD)
  find_package(Qt5Core REQUIRED)
  find_package(Qt5Sql REQUIRED)
  find_package(Qt5Xml REQUIRED)
  find_package(Qt5Network REQUIRED)
  set(QT_INCLUDES ${Qt5Xml_INCLUDE_DIRS} ${Qt5Network_INCLUDE_DIRS} ${Qt5Sql_INCLUDE_DIRS})
  include_directories(${QT_INCLUDES})
else()
  find_package(Qt4 REQUIRED)
endif()

file (GLOB headers "script_engine/*.h" "*.h")
file (GLOB src "script_engine/*.cpp" "*.cpp")
file (GLOB resources "*.qrc")

if(QT6_BUILD)
    QT6_WRAP_CPP(grumpyd_HEADERS_MOC ${grumpyd_HEADERS})
    QT6_ADD_RESOURCES(grumpyd_RESOURCES_RCC ${resources})
elseif(QT5_BUILD)
    QT5_WRAP_CPP(grumpyd_HEADERS_MOC ${grumpyd_HEADERS})
    QT5_ADD_RESOURCES(grumpyd_RESOURCES_RCC ${resources})
else()
    QT4_WRAP_CPP(grumpyd_HEADERS_MOC ${irc_HEADERS})
    QT4_ADD_RESOURCES(grumpyd_RESOURCES_RCC ${resources})
endif()

if (NOT QT5_BUILD)
  INCLUDE(${QT_USE_FILE})
endif()

ADD_DEFINITIONS(${QT_DEFINITIONS})
ADD_DEFINITIONS( -DQT_USE_QSTRINGBUILDER )

ADD_EXECUTABLE(grumpyd ${src} ${grumpyd_HEADERS_MOC} ${grumpyd_RESOURCES_RCC} ${headers} ${grumpyd_FORMS_HEADERS})

if (QT6_BUILD)
    TARGET_LINK_LIBRARIES(grumpyd Qt6::Core Qt6::Sql Qt6::Network Qt6::Xml)
elseif (QT5_BUILD)
    TARGET_LINK_LIBRARIES(grumpyd Qt5::Core Qt5::Sql Qt5::Network Qt5::Xml)
endif()

TARGET_LINK_LIBRARIES(grumpyd grumpycore ${QT_LIBRARIES})
if (NOT WIN32)
    INSTALL(TARGETS grumpyd RUNTIME DESTINATION bin)
endif()

INCLUDE_DIRECTORIES(${CMAKE_CURRENT_BINARY_DIR})
