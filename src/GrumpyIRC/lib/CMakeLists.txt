PROJECT(grumpy_lib)

SET(QT_USE_QTNETWORK TRUE)
SET(QT_USE_QTSCRIPT TRUE)
SET(CMAKE_BUILD_TYPE Release)
SET(CMAKE_AUTOMOC ON)

option(QT6_BUILD "Build with Qt6" false)

if(QT6_BUILD)
  find_package(Qt6Core REQUIRED)
  find_package(Qt6Widgets REQUIRED)
  find_package(Qt6Gui REQUIRED)
  find_package(Qt6Network REQUIRED)
  find_package(Qt6Multimedia REQUIRED)
  find_package(Qt6Xml REQUIRED)
  set(QT_INCLUDES ${Qt6Gui_INCLUDE_DIRS} ${Qt6Widgets_INCLUDE_DIRS} ${Qt6Network_INCLUDE_DIRS})
  include_directories(${QT_INCLUDES})
elseif(QT5_BUILD)
  find_package(Qt5Core REQUIRED)
  find_package(Qt5Widgets REQUIRED)
  find_package(Qt5Gui REQUIRED)
  find_package(Qt5Network REQUIRED)
  find_package(Qt5Multimedia REQUIRED)
  find_package(Qt5Xml REQUIRED)
  set(QT_INCLUDES ${Qt5Gui_INCLUDE_DIRS} ${Qt5Widgets_INCLUDE_DIRS} ${Qt5Network_INCLUDE_DIRS})
  include_directories(${QT_INCLUDES})
else()
  find_package(Qt4 REQUIRED)
endif()

file (GLOB ui "script_engine/*.ui" "*.ui")
file (GLOB headers "script_engine/*.h" "*.h")
file (GLOB src "script_engine/*.cpp" "*.cpp")
file (GLOB resources "*.qrc")

if(QT6_BUILD)
    QT6_WRAP_CPP(grumpy_lib_HEADERS_MOC ${grumpy_lib_HEADERS})
    QT6_WRAP_UI(grumpy_lib_FORMS_HEADERS ${ui})
    QT6_ADD_RESOURCES(grumpy_lib_RESOURCES_RCC ${resources})
elseif(QT5_BUILD)
    QT5_WRAP_CPP(grumpy_lib_HEADERS_MOC ${grumpy_lib_HEADERS})
    QT5_WRAP_UI(grumpy_lib_FORMS_HEADERS ${ui})
    QT5_ADD_RESOURCES(grumpy_lib_RESOURCES_RCC ${resources})
else()
    QT4_WRAP_CPP(grumpy_lib_HEADERS_MOC ${irc_HEADERS})
    QT4_WRAP_UI(grumpy_lib_FORMS_HEADERS ${ui})
    QT4_ADD_RESOURCES(grumpy_lib_RESOURCES_RCC ${resources})
endif()

if (NOT QT5_BUILD)
  INCLUDE(${QT_USE_FILE})
endif()

ADD_DEFINITIONS(${QT_DEFINITIONS})
ADD_DEFINITIONS( -DGRUMPY_LIBRARY -DQT_USE_QSTRINGBUILDER )

ADD_LIBRARY(grumpy_lib SHARED ${src} ${grumpy_lib_HEADERS_MOC} ${headers} ${grumpy_lib_RESOURCES_RCC} ${grumpy_lib_FORMS_HEADERS})

if (QT6_BUILD)
    TARGET_LINK_LIBRARIES(grumpy_lib Qt6::Core Qt6::Multimedia Qt6::Gui Qt6::Widgets Qt6::Xml)
elseif (QT5_BUILD)
    TARGET_LINK_LIBRARIES(grumpy_lib Qt5::Core Qt5::Multimedia Qt5::Gui Qt5::Widgets Qt5::Xml)
endif()

TARGET_LINK_LIBRARIES(grumpy_lib grumpycore irc2htmlcode ${QT_LIBRARIES})
set_target_properties(${PROJECT_NAME} PROPERTIES OUTPUT_NAME "grumpy")
if (NOT WIN32)
    INSTALL(TARGETS grumpy_lib LIBRARY DESTINATION lib)
endif()
INCLUDE_DIRECTORIES(${CMAKE_CURRENT_BINARY_DIR})
INCLUDE_DIRECTORIES("../../")
