PROJECT(grumpyd_ut)

#SET(QT_USE_QTNETWORK TRUE)
SET(QT_USE_QTXML TRUE)
SET(CMAKE_BUILD_TYPE Release)
SET(CMAKE_AUTOMOC ON)

if(QT5_BUILD)
  find_package(Qt5Core REQUIRED)
  find_package(Qt5Xml REQUIRED)
  find_package(Qt5Test REQUIRED)
  set(QT_INCLUDES ${Qt5Xml_INCLUDE_DIRS} ${Qt5Test_INCLUDE_DIRS})
  include_directories(${QT_INCLUDES})
else()
  find_package(Qt4 REQUIRED)
endif()

file (GLOB headers "*.h")
file (GLOB src "*.cpp")
file (GLOB resources "*.qrc")

if(QT5_BUILD)
    QT5_WRAP_CPP(grumpyd_ut_HEADERS_MOC ${grumpyd_ut_HEADERS})
    QT5_ADD_RESOURCES(grumpyd_ut_RESOURCES_RCC ${resources})
else()
    QT4_WRAP_CPP(grumpyd_ut_HEADERS_MOC ${irc_HEADERS})
    QT4_ADD_RESOURCES(grumpyd_ut_RESOURCES_RCC ${resources})
endif()

if (NOT QT5_BUILD)
  INCLUDE(${QT_USE_FILE})
endif()

if (SQLITE)
  ADD_DEFINITIONS(-DGRUMPY_SQLITE)
endif()

ADD_DEFINITIONS(${QT_DEFINITIONS})
ADD_DEFINITIONS( -DQT_USE_QSTRINGBUILDER )

ADD_EXECUTABLE(grumpyd_ut ${src} ${grumpyd_ut_HEADERS_MOC} ${grumpyd_ut_RESOURCES_RCC} ${headers} ${grumpyd_ut_FORMS_HEADERS})
if (QT5_BUILD)
    target_link_libraries(grumpyd_ut Qt5::Core Qt5::Test)
endif()
TARGET_LINK_LIBRARIES(grumpyd_ut grumpycore ${QT_LIBRARIES})
INCLUDE_DIRECTORIES(${CMAKE_CURRENT_BINARY_DIR})
